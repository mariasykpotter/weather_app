{"ast":null,"code":"import _slicedToArray from \"C:\\\\web\\\\site\\\\mern-full-course\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\web\\\\site\\\\mern-full-course\\\\client\\\\src\\\\pages\\\\DetailPage.js\";\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useHttp } from '../hooks/http.hook';\nimport { AuthContext } from '../context/AuthContext';\nimport { Loader } from '../components/Loader';\nimport { LinkCard } from '../components/LinkCard';\nexport const DetailPage = () => {\n  const _useContext = useContext(AuthContext),\n        token = _useContext.token;\n\n  const _useHttp = useHttp(),\n        request = _useHttp.request,\n        loading = _useHttp.loading;\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        link = _useState2[0],\n        setLink = _useState2[1];\n\n  const linkId = useParams().id;\n  const getLink = useCallback(async () => {\n    try {\n      const fetched = await request(`/api/link/${linkId}`, 'GET', null, {\n        Authorization: `Bearer ${token}`\n      });\n      setLink(fetched);\n    } catch (e) {}\n  }, [token, linkId, request]);\n  useEffect(() => {\n    getLink();\n  }, [getLink]);\n\n  if (loading) {\n    return React.createElement(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(React.Fragment, null, !loading && link && React.createElement(LinkCard, {\n    link: link,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }));\n};","map":{"version":3,"sources":["C:/web/site/mern-full-course/client/src/pages/DetailPage.js"],"names":["React","useCallback","useContext","useEffect","useState","useParams","useHttp","AuthContext","Loader","LinkCard","DetailPage","token","request","loading","link","setLink","linkId","id","getLink","fetched","Authorization","e"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,UAA5B,EAAwCC,SAAxC,EAAmDC,QAAnD,QAAkE,OAAlE;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,SAAQC,OAAR,QAAsB,oBAAtB;AACA,SAAQC,WAAR,QAA0B,wBAA1B;AACA,SAAQC,MAAR,QAAqB,sBAArB;AACA,SAAQC,QAAR,QAAuB,wBAAvB;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAAA,sBACdR,UAAU,CAACK,WAAD,CADI;AAAA,QACvBI,KADuB,eACvBA,KADuB;;AAAA,mBAEHL,OAAO,EAFJ;AAAA,QAEvBM,OAFuB,YAEvBA,OAFuB;AAAA,QAEdC,OAFc,YAEdA,OAFc;;AAAA,oBAGNT,QAAQ,CAAC,IAAD,CAHF;AAAA;AAAA,QAGvBU,IAHuB;AAAA,QAGjBC,OAHiB;;AAI9B,QAAMC,MAAM,GAAGX,SAAS,GAAGY,EAA3B;AAEA,QAAMC,OAAO,GAAGjB,WAAW,CAAC,YAAY;AACtC,QAAI;AACF,YAAMkB,OAAO,GAAG,MAAMP,OAAO,CAAE,aAAYI,MAAO,EAArB,EAAwB,KAAxB,EAA+B,IAA/B,EAAqC;AAChEI,QAAAA,aAAa,EAAG,UAAST,KAAM;AADiC,OAArC,CAA7B;AAGAI,MAAAA,OAAO,CAACI,OAAD,CAAP;AACD,KALD,CAKE,OAAOE,CAAP,EAAU,CAAE;AACf,GAP0B,EAOxB,CAACV,KAAD,EAAQK,MAAR,EAAgBJ,OAAhB,CAPwB,CAA3B;AASAT,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,OAAO;AACR,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;;AAIA,MAAIL,OAAJ,EAAa;AACX,WAAO,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,SACE,0CACI,CAACA,OAAD,IAAYC,IAAZ,IAAoB,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAEA,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADxB,CADF;AAKD,CA5BM","sourcesContent":["import React, {useCallback, useContext, useEffect, useState} from 'react'\r\nimport {useParams} from 'react-router-dom'\r\nimport {useHttp} from '../hooks/http.hook'\r\nimport {AuthContext} from '../context/AuthContext'\r\nimport {Loader} from '../components/Loader'\r\nimport {LinkCard} from '../components/LinkCard'\r\n\r\nexport const DetailPage = () => {\r\n  const {token} = useContext(AuthContext)\r\n  const {request, loading} = useHttp()\r\n  const [link, setLink] = useState(null)\r\n  const linkId = useParams().id\r\n\r\n  const getLink = useCallback(async () => {\r\n    try {\r\n      const fetched = await request(`/api/link/${linkId}`, 'GET', null, {\r\n        Authorization: `Bearer ${token}`\r\n      })\r\n      setLink(fetched)\r\n    } catch (e) {}\r\n  }, [token, linkId, request])\r\n\r\n  useEffect(() => {\r\n    getLink()\r\n  }, [getLink])\r\n\r\n  if (loading) {\r\n    return <Loader />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      { !loading && link && <LinkCard link={link} /> }\r\n    </>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}