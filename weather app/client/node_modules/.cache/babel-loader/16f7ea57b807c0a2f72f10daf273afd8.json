{"ast":null,"code":"var _jsxFileName = \"C:\\\\web\\\\site\\\\mern-full-course\\\\client\\\\src\\\\App.js\";\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport { MapPage } from './pages/MapPage';\nimport { MainPage } from './pages/MainPage';\nimport 'materialize-css';\nimport './font/Rimouski.css';\nimport './index.css';\nimport { Map, TileLayer } from \"react-leaflet\";\nconst API_key = \"2050604e9f3fe6c87cc830e26c8f53dc\";\nconst KELVIN = 273.15;\nlet scale = '°C';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.ChangetoCelsius = () => {\n      if (scale === '°K') {\n        this.setState({\n          temp: Math.round((this.state.temp - KELVIN) * 100) / 100\n        });\n      } else if (scale === '°F') {\n        this.setState({\n          temp: Math.round((this.state.temp - 32) / 1.8 * 100) / 100\n        });\n      }\n\n      scale = '°C';\n    };\n\n    this.ChangetoKelvin = () => {\n      if (scale === '°C') {\n        this.setState({\n          temp: Math.round((this.state.temp + KELVIN) * 100) / 100\n        });\n      } else if (scale === '°F') {\n        this.setState({\n          temp: Math.round((this.state.temp + 459.67) / 1.8 * 100) / 100\n        });\n      }\n\n      scale = '°K';\n    };\n\n    this.ChangetoFahrenheit = () => {\n      if (scale === '°C') {\n        this.setState({\n          temp: Math.round((this.state.temp * 1.8 + 32) * 100) / 100\n        });\n      } else if (scale === '°K') {\n        this.setState({\n          temp: Math.round((this.state.temp * 1.8 - 459.67) * 100) / 100\n        });\n      }\n\n      scale = '°F';\n    };\n\n    this.weatherMethod = async () => {\n      if (this.state.city.length === 5 && Number.parseInt(this.state.city) + '' === this.state.city) {\n        this.searchMethod = 'zip';\n      } else {\n        this.searchMethod = 'q';\n      }\n\n      const url = `https://api.openweathermap.org/data/2.5/weather?${this.searchMethod}=${this.state.city}&appid=${API_key}`;\n\n      try {\n        const response = await fetch(url).then(res => {\n          return res.json();\n        }).then(data => {\n          this.setState({\n            longitude: data.coord.lon,\n            latitude: data.coord.lat,\n            description: data.weather[0].description,\n            temp: Math.round((data.main.temp - KELVIN) * 100) / 100,\n            pressure: data.main.pressure,\n            humidity: data.main.humidity,\n            city: data.name,\n            country: data.sys.country,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            wind: data.wind.speed,\n            icon: data.weather[0].icon,\n            num_clouds: data.clouds.all\n          });\n        });\n      } catch {\n        alert('The city or zip code entered are incorrect');\n      }\n\n      console.log(this.state);\n    };\n\n    this.state = {\n      longitude: undefined,\n      latitude: undefined,\n      description: '',\n      temp: undefined,\n      pressure: undefined,\n      humidity: undefined,\n      city: undefined,\n      country: undefined,\n      sunrise: undefined,\n      sunset: undefined,\n      wind: undefined,\n      num_clouds: undefined,\n      icon: undefined,\n      scale: '°C'\n    };\n  }\n\n  ConvertUnixtoTime(value) {\n    var t = new Date(value * 1000);\n    var formatted = ('0' + t.getHours()).slice(-2) + ':' + ('0' + t.getMinutes()).slice(-2);\n    return formatted;\n  }\n\n  render() {\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      style: {\n        marginTop: 10\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      style: {\n        height: 35\n      },\n      placeholder: \"Enter city or zip-code\",\n      id: \"city\",\n      type: \"city\",\n      name: \"city\",\n      className: \"my-input\",\n      onChange: e => this.setState({\n        city: e.target.value\n      }),\n      value: this.props.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      className: \"my-button\",\n      onClick: () => this.weatherMethod(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Search\"), React.createElement(Link, {\n      className: \"linka\",\n      to: \"/map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Look at map\")), React.createElement(MainPage, {\n      sunrise: this.ConvertUnixtoTime(this.state.sunrise),\n      sunset: this.ConvertUnixtoTime(this.state.sunset),\n      num_clouds: this.state.num_clouds,\n      pressure: this.state.pressure,\n      wind: this.state.wind,\n      humidity: this.state.humidity,\n      temp: this.state.temp,\n      min_temp: this.state.min_temp,\n      max_temp: this.state.max_temp,\n      scale: scale,\n      Celsius: () => this.ChangetoCelsius(),\n      Kelvin: () => this.ChangetoKelvin(),\n      Fahrenheit: () => this.ChangetoFahrenheit(),\n      icon: this.state.icon,\n      description: this.state.description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    })), React.createElement(Route, {\n      exact: true,\n      path: \"/map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(MapPage, {\n      longtitude: this.state.longitude,\n      latitude: this.state.latitude,\n      description: this.state.description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/web/site/mern-full-course/client/src/App.js"],"names":["React","BrowserRouter","Router","Route","Link","MapPage","MainPage","Map","TileLayer","API_key","KELVIN","scale","App","Component","constructor","props","ChangetoCelsius","setState","temp","Math","round","state","ChangetoKelvin","ChangetoFahrenheit","weatherMethod","city","length","Number","parseInt","searchMethod","url","response","fetch","then","res","json","data","longitude","coord","lon","latitude","lat","description","weather","main","pressure","humidity","name","country","sys","sunrise","sunset","wind","speed","icon","num_clouds","clouds","all","alert","console","log","undefined","ConvertUnixtoTime","value","t","Date","formatted","getHours","slice","getMinutes","render","marginTop","height","e","target","min_temp","max_temp"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {BrowserRouter as Router, Route, Link} from \"react-router-dom\";\r\nimport {MapPage} from './pages/MapPage'\r\nimport {MainPage} from './pages/MainPage'\r\nimport 'materialize-css'\r\nimport './font/Rimouski.css'\r\nimport './index.css'\r\nimport {Map, TileLayer} from \"react-leaflet\";\r\n\r\nconst API_key = \"2050604e9f3fe6c87cc830e26c8f53dc\";\r\nconst KELVIN = 273.15;\r\nlet scale = '°C';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = ({\r\n            longitude: undefined,\r\n            latitude: undefined,\r\n            description: '',\r\n            temp: undefined,\r\n            pressure: undefined,\r\n            humidity: undefined,\r\n            city: undefined,\r\n            country: undefined,\r\n            sunrise: undefined,\r\n            sunset: undefined,\r\n            wind: undefined,\r\n            num_clouds: undefined,\r\n            icon: undefined,\r\n            scale: '°C'\r\n        })\r\n    }\r\n\r\n    ChangetoCelsius = () => {\r\n        if (scale === '°K') {\r\n            this.setState({temp: Math.round(((this.state.temp - KELVIN) * 100)) / 100});\r\n        } else if (scale === '°F') {\r\n            this.setState({temp: Math.round(((this.state.temp - 32) / 1.8) * 100) / 100});\r\n        }\r\n        scale = '°C'\r\n    }\r\n\r\n    ChangetoKelvin = () => {\r\n        if (scale === '°C') {\r\n            this.setState({temp: Math.round((this.state.temp + KELVIN) * 100) / 100});\r\n        } else if (scale === '°F') {\r\n            this.setState({temp: Math.round(((this.state.temp + 459.67) / 1.8) * 100) / 100});\r\n        }\r\n        scale = '°K'\r\n    }\r\n\r\n    ChangetoFahrenheit = () => {\r\n        if (scale === '°C') {\r\n            this.setState({temp: Math.round(((this.state.temp * 1.8 + 32) * 100)) / 100});\r\n        } else if (scale === '°K') {\r\n            this.setState({temp: Math.round(((this.state.temp * 1.8) - 459.67) * 100) / 100});\r\n        }\r\n        scale = '°F'\r\n    }\r\n\r\n    ConvertUnixtoTime(value) {\r\n        var t = new Date(value * 1000);\r\n        var formatted = ('0' + t.getHours()).slice(-2) + ':' + ('0' + t.getMinutes()).slice(-2);\r\n        return formatted;\r\n    }\r\n\r\n    weatherMethod = async () => {\r\n        if (this.state.city.length === 5 && Number.parseInt(this.state.city) + '' === this.state.city) {\r\n            this.searchMethod = 'zip';\r\n        } else {\r\n            this.searchMethod = 'q';\r\n        }\r\n        const url = `https://api.openweathermap.org/data/2.5/weather?${this.searchMethod}=${this.state.city}&appid=${API_key}`;\r\n        try {\r\n            const response = await fetch(url)\r\n                .then((res) => {\r\n                    return res.json()\r\n                }).then((data) => {\r\n                    this.setState({\r\n                        longitude: data.coord.lon,\r\n                        latitude: data.coord.lat,\r\n                        description: data.weather[0].description,\r\n                        temp: Math.round(((data.main.temp - KELVIN) * 100)) / 100,\r\n                        pressure: data.main.pressure,\r\n                        humidity: data.main.humidity,\r\n                        city: data.name,\r\n                        country: data.sys.country,\r\n                        sunrise: data.sys.sunrise,\r\n                        sunset: data.sys.sunset,\r\n                        wind: data.wind.speed,\r\n                        icon: data.weather[0].icon,\r\n                        num_clouds: data.clouds.all\r\n                    })\r\n                });\r\n        } catch {\r\n            alert('The city or zip code entered are incorrect')\r\n        }\r\n        console.log(this.state)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Route exact path=\"/\">\r\n                    <form style={{marginTop: 10}}>\r\n                        <input style={{height: 35}}\r\n                               placeholder=\"Enter city or zip-code\"\r\n                               id=\"city\"\r\n                               type=\"city\"\r\n                               name=\"city\"\r\n                               className=\"my-input\"\r\n                               onChange={e => this.setState({city: e.target.value})}\r\n                               value={this.props.value}\r\n                        />\r\n                        <button\r\n                            type={\"button\"}\r\n                            className=\"my-button\"\r\n                            onClick={() => this.weatherMethod()}\r\n                        >Search\r\n                        </button>\r\n                        <Link className=\"linka\" to=\"/map\">Look at map</Link>\r\n                    </form>\r\n\r\n                    <MainPage\r\n                        sunrise={this.ConvertUnixtoTime(this.state.sunrise)}\r\n                        sunset={this.ConvertUnixtoTime(this.state.sunset)}\r\n                        num_clouds={this.state.num_clouds}\r\n                        pressure={this.state.pressure}\r\n                        wind={this.state.wind}\r\n                        humidity={this.state.humidity}\r\n                        temp={this.state.temp}\r\n                        min_temp={this.state.min_temp}\r\n                        max_temp={this.state.max_temp}\r\n                        scale={scale}\r\n                        Celsius={() => this.ChangetoCelsius()}\r\n                        Kelvin={() => this.ChangetoKelvin()}\r\n                        Fahrenheit={() => this.ChangetoFahrenheit()}\r\n                        icon={this.state.icon}\r\n                        description={this.state.description}\r\n                    />\r\n                </Route>\r\n                <Route exact path=\"/map\">\r\n                    <MapPage longtitude={this.state.longitude} latitude={this.state.latitude}\r\n                             description={this.state.description}/>\r\n                </Route>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App\r\n"]},"metadata":{},"sourceType":"module"}